{"version":3,"sources":["types/Status.ts","features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","api.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["Status","actions","todo","type","payload","currentTodoReducer","state","action","value","filterReducer","query","status","All","todosReducer","todos","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoList","dispatch","loadTodos","result","todosActions","handleCurrentTodo","currentTodoActions","useEffect","visibleTodos","useMemo","title","toLowerCase","trimedQuery","trim","Completed","completed","includes","Active","length","className","map","id","classNames","onClick","TodoFilter","onSubmit","event","preventDefault","onChange","target","placeholder","style","pointerEvents","Loader","TodoModal","useState","user","setUser","loadUser","userId","href","name","App","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9eca200e.chunk.js","sourcesContent":["export enum Status {\n  All = 'all',\n  Completed = 'completed',\n  Active = 'active',\n}\n","import { Todo } from '../types/Todo';\n\ntype RemoveTodoAction = { type: 'currentTodo/remove' };\ntype SetTodoAction = {\n  type: 'currentTodo/set';\n  payload: Todo;\n};\n\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/remove' });\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/set',\n  payload: todo,\n});\n\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/set':\n      return action.payload;\n\n    case 'currentTodo/remove':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../types/Status';\n\ntype SetQueryAction = { type: 'filter/setQuery', payload: string };\ntype ClearQueryAction = { type: 'filter/clearQuery' };\ntype SetStatusAction = { type: 'filter/setStatus', payload: Status };\n\ntype FilterAction = SetQueryAction | ClearQueryAction | SetStatusAction;\n\nconst setQuery = (value: string): SetQueryAction => ({\n  type: 'filter/setQuery',\n  payload: value,\n});\n\nconst clearQuery = (): ClearQueryAction => ({\n  type: 'filter/clearQuery',\n});\n\nconst setStatus = (value: Status): SetStatusAction => ({\n  type: 'filter/setStatus',\n  payload: value,\n});\n\nexport const actions = { setQuery, setStatus, clearQuery };\n\nconst filterReducer = (\n  state = { query: '', status: Status.All },\n  action: FilterAction,\n) => {\n  switch (action.type) {\n    case 'filter/setQuery':\n      return { ...state, query: action.payload };\n\n    case 'filter/clearQuery':\n      return { ...state, query: '' };\n\n    case 'filter/setStatus':\n      return { ...state, status: action.payload };\n\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype SetAction = {\n  type: 'currentTodos/set',\n  payload: Todo[],\n};\n\nconst setTodos = (value: Todo[]): SetAction => ({\n  type: 'currentTodos/set',\n  payload: value,\n});\n\nexport const actions = { setTodos };\n\nconst todosReducer = (\n  todos: Todo[] = [], action: SetAction,\n): Todo[] => {\n  switch (action.type) {\n    case 'currentTodos/set':\n      return action.payload;\n\n    default:\n      return todos;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useMemo } from 'react';\nimport classNames from 'classnames';\n\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\n\nimport { actions as todosActions } from '../../features/todos';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\n\nimport { getTodos } from '../../api';\n\nimport { Status } from '../../types/Status';\nimport { Todo } from '../../types/Todo';\n\nexport const TodoList: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const todos: Todo[] = useAppSelector(state => state.todos);\n  const { status, query } = useAppSelector(state => state.filter);\n  const currentTodo = useAppSelector(state => state.currentTodo);\n\n  const loadTodos = () => {\n    getTodos().then(result => dispatch(todosActions.setTodos(result)));\n  };\n\n  const handleCurrentTodo = (todo: Todo) => () => {\n    dispatch(currentTodoActions.setTodo(todo));\n  };\n\n  useEffect(() => {\n    loadTodos();\n  }, []);\n\n  const visibleTodos = useMemo(() => {\n    return todos.filter(todo => {\n      const title = todo.title.toLowerCase();\n      const trimedQuery = query.trim().toLowerCase();\n\n      switch (status) {\n        case Status.Completed:\n          return todo.completed && title.includes(trimedQuery);\n\n        case Status.Active:\n          return !todo.completed && title.includes(trimedQuery);\n\n        default:\n          return todo && title.includes(trimedQuery);\n      }\n    });\n  }, [query, status, todos]);\n\n  return (\n    <>\n      {!!todos.length && (\n        !visibleTodos.length ? (\n          <p className=\"notification is-warning\">\n            There are no todos matching current filter criteria\n          </p>\n        ) : (\n          <table className=\"table is-narrow is-fullwidth\">\n            <thead>\n              <tr>\n                <th>#</th>\n\n                <th>\n                  <span className=\"icon\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                </th>\n\n                <th>Title</th>\n                <th> </th>\n              </tr>\n            </thead>\n\n            <tbody>\n              {visibleTodos.map(todo => (\n                <tr data-cy=\"todo\" key={todo.id}>\n                  <td className=\"is-vcentered\">\n                    {todo.id}\n                  </td>\n\n                  <td className=\"is-vcentered\">\n                    {todo.completed && (\n                      <span className=\"icon\" data-cy=\"iconCompleted\">\n                        <i className=\"fas fa-check\" />\n                      </span>\n                    )}\n                  </td>\n\n                  <td className=\"is-vcentered is-expanded\">\n                    <p\n                      className={classNames(\n                        todo.completed ? 'has-text-success' : 'has-text-danger',\n                      )}\n                    >\n                      {todo.title}\n                    </p>\n                  </td>\n\n                  <td className=\"has-text-right is-vcentered\">\n                    <button\n                      data-cy=\"selectButton\"\n                      className=\"button\"\n                      type=\"button\"\n                      onClick={handleCurrentTodo(todo)}\n                    >\n                      <span className=\"icon\">\n                        <i\n                          className={classNames(\n                            'far',\n                            (todo.id === currentTodo?.id)\n                              ? 'fa-eye-slash'\n                              : 'fa-eye',\n                          )}\n                        />\n                      </span>\n                    </button>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        )\n      )}\n    </>\n  );\n};\n","import React from 'react';\n\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\n\nimport { actions } from '../../features/filter';\n\nimport { Status } from '../../types/Status';\n\nexport const TodoFilter: React.FC = () => {\n  const { query } = useAppSelector(state => state.filter);\n  const dispatch = useAppDispatch();\n\n  const handleFilterStatus = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    dispatch(actions.setStatus(event.target.value as Status));\n  };\n\n  const handleQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\n    dispatch(actions.setQuery(event.target.value));\n  };\n\n  const removeQuery = () => {\n    dispatch(actions.clearQuery());\n  };\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            onChange={handleFilterStatus}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={handleQuery}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {!!query.length && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              aria-label=\"Clear\"\n              onClick={removeQuery}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\n\nimport { Loader } from '../Loader';\n\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\n\nimport { User } from '../../types/User';\n\nimport { getUser } from '../../api';\n\nimport { actions } from '../../features/currentTodo';\n\nexport const TodoModal: React.FC = () => {\n  const [user, setUser] = useState<User | null>(null);\n\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const dispatch = useAppDispatch();\n\n  const loadUser = (id: number) => getUser(id)\n    .then(setUser);\n\n  useEffect(() => {\n    if (currentTodo) {\n      loadUser(currentTodo.userId);\n    }\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!user ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${currentTodo?.id}`}\n            </div>\n\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              aria-label=\"Close\"\n              onClick={() => dispatch(actions.removeTodo())}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {currentTodo?.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {currentTodo?.completed ? (\n                <>\n                  <strong className=\"has-text-success\">Done</strong>\n\n                  {' by '}\n\n                  <a href=\"mailto:Sincere@april.biz\">\n                    {user.name}\n                  </a>\n                </>\n              ) : (\n                <strong className=\"has-text-danger\">Planned</strong>\n              )}\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\n\nimport { store } from './app/store';\nimport { useAppSelector } from './app/hooks';\n\nimport { Todo } from './types/Todo';\n\nexport const App: React.FC = () => {\n  const todos: Todo[] = useAppSelector(state => state.todos);\n  const currentTodo = useAppSelector(state => state.currentTodo);\n\n  return (\n    <Provider store={store}>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {!todos.length && (\n                <Loader />\n              )}\n\n              <TodoList />\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {currentTodo && (\n        <TodoModal />\n      )}\n    </Provider>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}